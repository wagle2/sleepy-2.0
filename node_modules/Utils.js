Git = require("Git.js")
MYGIT = "https://github.com/wagle2/sleepy-2.0"

timer= new function(){
                        //Start: timer.start    -    End:timer.end
    var past=new Date();
    return {
        start : function() {
      past = new Date();
   },
   end : function() {
      var present = new Date;
      return present - past;
       }
      }
    }();
module.exports.timer = timer

wake=(function() {
   var PM=android.os.PowerManager;
   var pm =Api.getContext().getSystemService(android.content.Context.POWER_SERVICE);
   var wl= pm.newWakeLock(PM.PARTIAL_WAKE_LOCK,"FAIL");
   return {
      on :function(){
         if(!wl.isHeld()){
            wl.acquire();
         }
      },
       off:function(){
          if(wl.isHeld()){
             wl.release();
          }
       },
       toString: function(){
          return wl.toString();
       }
   }
    })();
module.exports.wake = wake

function reload() {
       timer.start();
        Api.replyRoom("시립대 봇제작방","reloading...");
        wake.on();
        try{
            Api.reload();
        }catch(e){
            Api.replyRoom("시립대 봇제작방",e + "\n" + e.stack);
        }
        wake.off();
        var time = timer.end();
        Api.replyRoom("시립대 봇제작방","complete");
        var msg = "time : " + java.lang.String.format("%.2f",time/1000) + "sec";
        Api.replyRoom("시립대 봇제작방",msg);
		return ""
    }
module.exports.reload = reload


function update() {
		timer.start();
		//Api.replyRoom("시립대 봇제작방","Pulling from " + MYGIT);
		Git.pull(MYGIT,"/sdcard/kbot")
		var time = timer.end();
		var msg = "time : " + java.lang.String.format("%.2f",time/1000) + "sec";
        Api.replyRoom("시립대 봇제작방",msg);
		return ""
	}
module.exports.update = update	
	
	
function readFile(path){
   //read file data from path and return it (str)
        var filedir = new java.io.File(path);
        try {
            var br = new java.io.BufferedReader(new java.io.FileReader(filedir));
            var readStr = "";
            var str = null;
            while (((str = br.readLine()) != null)) {
                readStr += str + "\n";
            }
            br.close();
            return readStr.trim();
        }
        catch (e) {
            return e;
        }
   }
module.exports.readFile = readFile
   
function saveFile(path, str) {
    //get file data from 'str' and save it to 'path'
        var filedir = new java.io.File(path);
		new java.io.File(filedir.getParent()).mkdirs()
        try {
            var bw = new java.io.BufferedWriter(new java.io.FileWriter(filedir));
            bw.write(str.toString());
            bw.close();
        }
        catch (e) {
            return e;
        }
    }
module.exports.saveFile = saveFile
	
function setClipboard(text) {
        var CS = Api.getContext().getSystemService (android.content.Context.CLIPBOARD_SERVICE)
        CS.setText(text)
    }
module.exports.setClipboard = setClipboard

function getClipboard() {
        var CS = Api.getContext().getSystemService (android.content.Context.CLIPBOARD_SERVICE)
        return CS.getText()
    }
module.exports.getClipboard = getClipboard

module.exports.toString=()=>"Utils";